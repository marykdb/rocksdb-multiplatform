package maryk.rocksdb

/**
 * Snapshot of metadata describing a compaction job.
 */
expect class CompactionJobInfo {
    /** Column family name the compaction operated on. */
    fun columnFamilyName(): ByteArray

    /** Smallest input level participating in the compaction. */
    fun baseInputLevel(): Int

    /** Target output level for the compaction results. */
    fun outputLevel(): Int

    /** Absolute paths of SST files consumed by the compaction. */
    fun inputFiles(): List<String>

    /** Absolute paths of SST files generated by the compaction. */
    fun outputFiles(): List<String>

    /** Wall clock duration of the job in microseconds. */
    fun elapsedMicros(): Long

    /** Number of corrupt keys encountered. */
    fun numCorruptKeys(): Long

    /** Logical records read from inputs. */
    fun inputRecords(): Long

    /** Logical records written to outputs. */
    fun outputRecords(): Long

    /** Total bytes of input SST data processed. */
    fun totalInputBytes(): Long

    /** Total bytes written to output SST files. */
    fun totalOutputBytes(): Long

    /** Reason RocksDB scheduled this compaction. */
    fun compactionReason(): CompactionReason

    /** Count of input files across all levels. */
    fun numInputFiles(): Long

    /** Count of input files already residing at the output level. */
    fun numInputFilesAtOutputLevel(): Long

    /** Aggregated statistics describing the compaction run. */
    fun compactionStats(): CompactionJobStats
}
